/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** ログイン */
        post: operations["AuthController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ログイン中のユーザー情報を取得 */
        get: operations["AuthController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tenants/{tenantUid}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** テナント内のユーザー一覧を取得 */
        get: operations["UsersController_findByTenant"];
        put?: never;
        /** テナントにユーザーを作成 */
        post: operations["UsersController_createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{uid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** ユーザーを削除 */
        delete: operations["UsersController_deleteUser"];
        options?: never;
        head?: never;
        /** ユーザーを更新 */
        patch: operations["UsersController_updateUser"];
        trace?: never;
    };
    "/tenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** テナント一覧を取得 */
        get: operations["TenantsController_findAll"];
        put?: never;
        /** テナントを作成する */
        post: operations["TenantsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tenants/{uid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** テナントを削除 */
        delete: operations["TenantsController_delete"];
        options?: never;
        head?: never;
        /** テナントを更新 */
        patch: operations["TenantsController_update"];
        trace?: never;
    };
    "/tenants/{tenantUid}/residents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** テナント内の利用者一覧を取得 */
        get: operations["ResidentsController_findByTenant"];
        put?: never;
        /** テナントに利用者を作成 */
        post: operations["ResidentsController_createResident"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tenants/{tenantUid}/residents/{uid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 利用者を削除 */
        delete: operations["ResidentsController_deleteResident"];
        options?: never;
        head?: never;
        /** 利用者を更新 */
        patch: operations["ResidentsController_updateResident"];
        trace?: never;
    };
    "/residents/{residentUid}/food-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 利用者の食事記録一覧を取得 */
        get: operations["FoodRecordsController_findByResident"];
        put?: never;
        /** 食事記録を作成 */
        post: operations["FoodRecordsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/residents/{residentUid}/food-records/{uid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 食事記録を削除 */
        delete: operations["FoodRecordsController_delete"];
        options?: never;
        head?: never;
        /** 食事記録を更新 */
        patch: operations["FoodRecordsController_update"];
        trace?: never;
    };
    "/residents/{residentUid}/bath-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 利用者の入浴記録一覧を取得 */
        get: operations["BathRecordsController_findByResident"];
        put?: never;
        /** 入浴記録を作成 */
        post: operations["BathRecordsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/residents/{residentUid}/bath-records/{uid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 入浴記録を削除 */
        delete: operations["BathRecordsController_delete"];
        options?: never;
        head?: never;
        /** 入浴記録を更新 */
        patch: operations["BathRecordsController_update"];
        trace?: never;
    };
    "/residents/{residentUid}/elimination-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 利用者の排泄記録一覧を取得 */
        get: operations["EliminationRecordsController_findByResident"];
        put?: never;
        /** 排泄記録を作成 */
        post: operations["EliminationRecordsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/residents/{residentUid}/elimination-records/{uid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 排泄記録を削除 */
        delete: operations["EliminationRecordsController_delete"];
        options?: never;
        head?: never;
        /** 排泄記録を更新 */
        patch: operations["EliminationRecordsController_update"];
        trace?: never;
    };
    "/residents/{residentUid}/daily-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 利用者の日常記録一覧を取得 */
        get: operations["DailyRecordsController_findByResident"];
        put?: never;
        /** 日常記録を作成 */
        post: operations["DailyRecordsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/residents/{residentUid}/daily-records/{uid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 日常記録を削除 */
        delete: operations["DailyRecordsController_delete"];
        options?: never;
        head?: never;
        /** 日常記録を更新 */
        patch: operations["DailyRecordsController_update"];
        trace?: never;
    };
    "/residents/{residentUid}/beverage-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 利用者の飲料記録一覧を取得 */
        get: operations["BeverageRecordsController_findByResident"];
        put?: never;
        /** 飲料記録を作成 */
        post: operations["BeverageRecordsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/residents/{residentUid}/beverage-records/{uid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 飲料記録を削除 */
        delete: operations["BeverageRecordsController_delete"];
        options?: never;
        head?: never;
        /** 飲料記録を更新 */
        patch: operations["BeverageRecordsController_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignInDto: {
            loginId: string;
            password: string;
        };
        TokenDto: {
            /** @description JWTトークン */
            token: string;
        };
        UserDto: {
            /** @description ユーザーUID */
            uid: string;
            /** @description ログインID */
            loginId: string;
            /** @description 姓 */
            familyName: string;
            /** @description 名 */
            givenName: string;
            /** @description 姓（フリガナ） */
            familyNameFurigana: string;
            /** @description 名（フリガナ） */
            givenNameFurigana: string;
            /** @description ユーザー権限 */
            role: string;
            /** @description テナントUID */
            tenantUid: string;
        };
        UserListItemDto: {
            /** @description ユーザーUID */
            uid: string;
            /** @description ログインID */
            loginId: string;
            /** @description 姓 */
            familyName: string;
            /** @description 名 */
            givenName: string;
            /** @description 姓（フリガナ） */
            familyNameFurigana: string;
            /** @description 名（フリガナ） */
            givenNameFurigana: string;
            /**
             * @description ロール
             * @enum {string}
             */
            role: "GLOBAL_ADMIN" | "TENANT_ADMIN" | "CAREGIVER";
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
        };
        UserListResponseDto: {
            /** @description ユーザー一覧 */
            items: components["schemas"]["UserListItemDto"][];
            /** @description 総件数 */
            total: number;
        };
        TenantUserCreateInputDto: {
            /** @description ログインID */
            loginId: string;
            /** @description パスワード */
            password: string;
            /** @description 姓 */
            familyName: string;
            /** @description 名 */
            givenName: string;
            /** @description 姓（フリガナ） */
            familyNameFurigana: string;
            /** @description 名（フリガナ） */
            givenNameFurigana: string;
            /** @description ユーザー権限 */
            role: string;
        };
        UserUpdateInputDto: {
            /**
             * @description 姓
             * @example 山田
             */
            familyName: string;
            /**
             * @description 名
             * @example 太郎
             */
            givenName: string;
            /**
             * @description 姓（フリガナ）
             * @example ヤマダ
             */
            familyNameFurigana: string;
            /**
             * @description 名（フリガナ）
             * @example タロウ
             */
            givenNameFurigana: string;
            /**
             * @description ユーザーロール
             * @example CAREGIVER
             * @enum {string}
             */
            role: "GLOBAL_ADMIN" | "TENANT_ADMIN" | "CAREGIVER";
        };
        TenantListItemDto: {
            /** @description テナントUID */
            uid: string;
            /** @description テナント名 */
            name: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
        };
        TenantListResponseDto: {
            /** @description テナント一覧 */
            items: components["schemas"]["TenantListItemDto"][];
            /** @description 総件数 */
            total: number;
        };
        TenantCreateInputDto: {
            /**
             * @description テナント名
             * @example 介護施設A
             */
            name: string;
        };
        TenantUpdateInputDto: {
            /**
             * @description テナント名
             * @example 介護施設A
             */
            name: string;
        };
        TenantCreateOutputDto: {
            /** @description テナントID */
            uid: string;
            /** @description テナント名 */
            name: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
        };
        ResidentDto: {
            /** @description UID */
            uid: string;
            /** @description テナントUID */
            tenantUid: string;
            /** @description 姓 */
            familyName: string;
            /** @description 名 */
            givenName: string;
            /** @description 姓（フリガナ） */
            familyNameFurigana: string;
            /** @description 名（フリガナ） */
            givenNameFurigana: string;
            /**
             * Format: date-time
             * @description 生年月日
             */
            dateOfBirth: string;
            /**
             * @description 性別
             * @enum {string}
             */
            gender: "MALE" | "FEMALE";
            /**
             * Format: date-time
             * @description 入所日
             */
            admissionDate: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
        };
        ResidentListResponseDto: {
            items: components["schemas"]["ResidentDto"][];
            /** @description 総件数 */
            total: number;
        };
        ResidentCreateInputDto: {
            /**
             * @description 姓
             * @example 山田
             */
            familyName: string;
            /**
             * @description 名
             * @example 太郎
             */
            givenName: string;
            /**
             * @description 姓（フリガナ）
             * @example ヤマダ
             */
            familyNameFurigana: string;
            /**
             * @description 名（フリガナ）
             * @example タロウ
             */
            givenNameFurigana: string;
            /**
             * @description 生年月日
             * @example 1950-01-01
             */
            dateOfBirth: string;
            /**
             * @description 性別
             * @example MALE
             * @enum {string}
             */
            gender: "MALE" | "FEMALE";
            /**
             * @description 入所日
             * @example 2024-01-01
             */
            admissionDate: string;
        };
        ResidentUpdateInputDto: {
            /**
             * @description 姓
             * @example 山田
             */
            familyName: string;
            /**
             * @description 名
             * @example 太郎
             */
            givenName: string;
            /**
             * @description 姓（フリガナ）
             * @example ヤマダ
             */
            familyNameFurigana: string;
            /**
             * @description 名（フリガナ）
             * @example タロウ
             */
            givenNameFurigana: string;
            /**
             * @description 生年月日
             * @example 1950-01-01
             */
            dateOfBirth: string;
            /**
             * @description 性別
             * @example MALE
             * @enum {string}
             */
            gender: "MALE" | "FEMALE";
            /**
             * @description 入所日
             * @example 2024-01-01
             */
            admissionDate: string;
        };
        FoodRecordDto: {
            /** @description UID */
            uid: string;
            /** @description テナントUID */
            tenantUid: string;
            /** @description 介護者UID */
            caregiverUid: string;
            /** @description 利用者UID */
            residentUid: string;
            /**
             * Format: date-time
             * @description 記録時刻
             */
            recordedAt: string;
            /** @description メモ */
            notes: string;
            /**
             * @description 食事の時間帯
             * @enum {string}
             */
            mealTime: "BREAKFAST" | "LUNCH" | "DINNER";
            /** @description 主食の摂取率（%） */
            mainCoursePercentage: number;
            /** @description 副食の摂取率（%） */
            sideDishPercentage: number;
            /** @description 汁物の摂取率（%） */
            soupPercentage: number;
            /**
             * @description 飲み物の種類
             * @enum {string}
             */
            beverageType: "WATER" | "TEA" | "OTHER";
            /** @description 飲み物の摂取量（ml） */
            beverageVolume: number;
        };
        FoodRecordListResponseDto: {
            items: components["schemas"]["FoodRecordDto"][];
            /** @description 総件数 */
            total: number;
        };
        FoodRecordCreateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 食事の時間帯
             * @example LUNCH
             * @enum {string}
             */
            mealTime: "BREAKFAST" | "LUNCH" | "DINNER";
            /**
             * @description 主食の摂取率（%）
             * @example 80
             */
            mainCoursePercentage: number;
            /**
             * @description 副食の摂取率（%）
             * @example 70
             */
            sideDishPercentage: number;
            /**
             * @description 汁物の摂取率（%）
             * @example 90
             */
            soupPercentage: number;
            /**
             * @description 飲み物の種類
             * @example WATER
             * @enum {string}
             */
            beverageType: "WATER" | "TEA" | "OTHER";
            /**
             * @description 飲み物の摂取量（ml）
             * @example 200
             */
            beverageVolume: number;
        };
        FoodRecordUpdateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 食事の時間帯
             * @example LUNCH
             * @enum {string}
             */
            mealTime: "BREAKFAST" | "LUNCH" | "DINNER";
            /**
             * @description 主食の摂取率（%）
             * @example 80
             */
            mainCoursePercentage: number;
            /**
             * @description 副食の摂取率（%）
             * @example 70
             */
            sideDishPercentage: number;
            /**
             * @description 汁物の摂取率（%）
             * @example 90
             */
            soupPercentage: number;
            /**
             * @description 飲み物の種類
             * @example WATER
             * @enum {string}
             */
            beverageType: "WATER" | "TEA" | "OTHER";
            /**
             * @description 飲み物の摂取量（ml）
             * @example 200
             */
            beverageVolume: number;
        };
        BathRecordDto: {
            /** @description UID */
            uid: string;
            /** @description テナントUID */
            tenantUid: string;
            /** @description 介護者UID */
            caregiverUid: string;
            /** @description 利用者UID */
            residentUid: string;
            /**
             * Format: date-time
             * @description 記録時刻
             */
            recordedAt: string;
            /** @description メモ */
            notes: string;
            /** @description 入浴方法 */
            bathMethod: string;
        };
        BathRecordListResponseDto: {
            items: components["schemas"]["BathRecordDto"][];
            /** @description 総件数 */
            total: number;
        };
        BathRecordCreateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 入浴方法
             * @example 一般浴
             */
            bathMethod: string;
        };
        BathRecordUpdateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 入浴方法
             * @example 一般浴
             */
            bathMethod: string;
        };
        EliminationRecordDto: {
            /** @description UID */
            uid: string;
            /** @description テナントUID */
            tenantUid: string;
            /** @description 介護者UID */
            caregiverUid: string;
            /** @description 利用者UID */
            residentUid: string;
            /**
             * Format: date-time
             * @description 記録時刻
             */
            recordedAt: string;
            /** @description メモ */
            notes: string;
            /** @description 排泄方法 */
            eliminationMethod: string;
            /** @description 便の有無 */
            hasFeces: boolean;
            /** @description 便失禁の有無 */
            fecalIncontinence: boolean;
            /** @description 便の性状 */
            fecesAppearance: string;
            /** @description 便の量（g） */
            fecesVolume: number;
            /** @description 尿の有無 */
            hasUrine: boolean;
            /** @description 尿失禁の有無 */
            urinaryIncontinence: boolean;
            /** @description 尿の性状 */
            urineAppearance: string;
            /** @description 尿量（ml） */
            urineVolume: number;
        };
        EliminationRecordListResponseDto: {
            items: components["schemas"]["EliminationRecordDto"][];
            /** @description 総件数 */
            total: number;
        };
        EliminationRecordCreateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 排泄方法
             * @example トイレ
             */
            eliminationMethod: string;
            /**
             * @description 便の有無
             * @example true
             */
            hasFeces: boolean;
            /**
             * @description 便失禁の有無
             * @example false
             */
            fecalIncontinence?: boolean;
            /**
             * @description 便の性状
             * @example 普通便
             */
            fecesAppearance?: string;
            /**
             * @description 便の量（g）
             * @example 100
             */
            fecesVolume?: number;
            /**
             * @description 尿の有無
             * @example true
             */
            hasUrine: boolean;
            /**
             * @description 尿失禁の有無
             * @example false
             */
            urinaryIncontinence?: boolean;
            /**
             * @description 尿の性状
             * @example 普通
             */
            urineAppearance?: string;
            /**
             * @description 尿量（ml）
             * @example 200
             */
            urineVolume?: number;
        };
        EliminationRecordUpdateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 排泄方法
             * @example トイレ
             */
            eliminationMethod: string;
            /**
             * @description 便の有無
             * @example true
             */
            hasFeces: boolean;
            /**
             * @description 便失禁の有無
             * @example false
             */
            fecalIncontinence?: boolean;
            /**
             * @description 便の性状
             * @example 普通便
             */
            fecesAppearance?: string;
            /**
             * @description 便の量（g）
             * @example 100
             */
            fecesVolume?: number;
            /**
             * @description 尿の有無
             * @example true
             */
            hasUrine: boolean;
            /**
             * @description 尿失禁の有無
             * @example false
             */
            urinaryIncontinence?: boolean;
            /**
             * @description 尿の性状
             * @example 普通
             */
            urineAppearance?: string;
            /**
             * @description 尿量（ml）
             * @example 200
             */
            urineVolume?: number;
        };
        DailyRecordDto: {
            /** @description UID */
            uid: string;
            /** @description テナントUID */
            tenantUid: string;
            /** @description 介護者UID */
            caregiverUid: string;
            /** @description 利用者UID */
            residentUid: string;
            /**
             * Format: date-time
             * @description 記録時刻
             */
            recordedAt: string;
            /** @description メモ */
            notes: string;
            /**
             * @description 日常の状態
             * @enum {string}
             */
            dailyStatus: "NORMAL" | "WARNING" | "ALERT";
        };
        DailyRecordListResponseDto: {
            items: components["schemas"]["DailyRecordDto"][];
            /** @description 総件数 */
            total: number;
        };
        DailyRecordCreateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 日常の状態
             * @example NORMAL
             * @enum {string}
             */
            dailyStatus?: "NORMAL" | "WARNING" | "ALERT";
        };
        DailyRecordUpdateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 日常の状態
             * @example NORMAL
             * @enum {string}
             */
            dailyStatus?: "NORMAL" | "WARNING" | "ALERT";
        };
        BeverageRecordDto: {
            /** @description UID */
            uid: string;
            /** @description テナントUID */
            tenantUid: string;
            /** @description 介護者UID */
            caregiverUid: string;
            /** @description 利用者UID */
            residentUid: string;
            /**
             * Format: date-time
             * @description 記録時刻
             */
            recordedAt: string;
            /** @description メモ */
            notes: string;
            /**
             * @description 飲み物の種類
             * @enum {string}
             */
            beverageType: "WATER" | "TEA" | "OTHER";
            /** @description 飲み物の量（ml） */
            volume: number;
        };
        BeverageRecordListResponseDto: {
            items: components["schemas"]["BeverageRecordDto"][];
            /** @description 総件数 */
            total: number;
        };
        BeverageRecordCreateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 飲み物の種類
             * @example WATER
             * @enum {string}
             */
            beverageType: "WATER" | "TEA" | "OTHER";
            /**
             * @description 飲み物の量（ml）
             * @example 200
             */
            volume: number;
        };
        BeverageRecordUpdateInputDto: {
            /**
             * Format: date-time
             * @description 記録時刻
             * @example 2024-03-20T12:00:00Z
             */
            recordedAt: string;
            /** @description メモ */
            notes?: string;
            /**
             * @description 飲み物の種類
             * @example WATER
             * @enum {string}
             */
            beverageType: "WATER" | "TEA" | "OTHER";
            /**
             * @description 飲み物の量（ml）
             * @example 200
             */
            volume: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInDto"];
            };
        };
        responses: {
            /** @description ログイン成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"];
                };
            };
        };
    };
    AuthController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ユーザー情報の取得に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    UsersController_findByTenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テナントUID（GLOBAL_ADMINの場合、省略すると全テナントのユーザーを取得） */
                tenantUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ユーザー一覧の取得に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListResponseDto"];
                };
            };
        };
    };
    UsersController_createUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テナントUID */
                tenantUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TenantUserCreateInputDto"];
            };
        };
        responses: {
            /** @description ユーザーの作成に成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    UsersController_deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーUID */
                uid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ユーザーの削除に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーUID */
                uid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateInputDto"];
            };
        };
        responses: {
            /** @description ユーザーの更新に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    TenantsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description テナント一覧の取得に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantListResponseDto"];
                };
            };
        };
    };
    TenantsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TenantCreateInputDto"];
            };
        };
        responses: {
            /** @description テナントが正常に作成されました */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TenantsController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テナントUID */
                uid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description テナントの削除に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TenantsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テナントUID */
                uid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TenantUpdateInputDto"];
            };
        };
        responses: {
            /** @description テナントの更新に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantCreateOutputDto"];
                };
            };
        };
    };
    ResidentsController_findByTenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テナントUID（GLOBAL_ADMINの場合、省略すると全テナントの利用者を取得） */
                tenantUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 利用者一覧の取得に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResidentListResponseDto"];
                };
            };
        };
    };
    ResidentsController_createResident: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テナントUID */
                tenantUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResidentCreateInputDto"];
            };
        };
        responses: {
            /** @description 利用者の作成に成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResidentDto"];
                };
            };
        };
    };
    ResidentsController_deleteResident: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テナントUID */
                tenantUid: string;
                /** @description 利用者UID */
                uid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 利用者の削除に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ResidentsController_updateResident: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テナントUID */
                tenantUid: string;
                /** @description 利用者UID */
                uid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResidentUpdateInputDto"];
            };
        };
        responses: {
            /** @description 利用者の更新に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResidentDto"];
                };
            };
        };
    };
    FoodRecordsController_findByResident: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 食事記録一覧の取得に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FoodRecordListResponseDto"];
                };
            };
        };
    };
    FoodRecordsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FoodRecordCreateInputDto"];
            };
        };
        responses: {
            /** @description 食事記録の作成に成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FoodRecordDto"];
                };
            };
        };
    };
    FoodRecordsController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 食事記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 食事記録の削除に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FoodRecordsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 食事記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FoodRecordUpdateInputDto"];
            };
        };
        responses: {
            /** @description 食事記録の更新に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FoodRecordDto"];
                };
            };
        };
    };
    BathRecordsController_findByResident: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 入浴記録一覧の取得に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BathRecordListResponseDto"];
                };
            };
        };
    };
    BathRecordsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BathRecordCreateInputDto"];
            };
        };
        responses: {
            /** @description 入浴記録の作成に成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BathRecordDto"];
                };
            };
        };
    };
    BathRecordsController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 入浴記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 入浴記録の削除に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BathRecordsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 入浴記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BathRecordUpdateInputDto"];
            };
        };
        responses: {
            /** @description 入浴記録の更新に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BathRecordDto"];
                };
            };
        };
    };
    EliminationRecordsController_findByResident: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 排泄記録一覧の取得に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EliminationRecordListResponseDto"];
                };
            };
        };
    };
    EliminationRecordsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EliminationRecordCreateInputDto"];
            };
        };
        responses: {
            /** @description 排泄記録の作成に成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EliminationRecordDto"];
                };
            };
        };
    };
    EliminationRecordsController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 排泄記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 排泄記録の削除に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EliminationRecordsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 排泄記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EliminationRecordUpdateInputDto"];
            };
        };
        responses: {
            /** @description 排泄記録の更新に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EliminationRecordDto"];
                };
            };
        };
    };
    DailyRecordsController_findByResident: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 日常記録一覧の取得に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyRecordListResponseDto"];
                };
            };
        };
    };
    DailyRecordsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DailyRecordCreateInputDto"];
            };
        };
        responses: {
            /** @description 日常記録の作成に成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyRecordDto"];
                };
            };
        };
    };
    DailyRecordsController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 日常記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 日常記録の削除に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DailyRecordsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 日常記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DailyRecordUpdateInputDto"];
            };
        };
        responses: {
            /** @description 日常記録の更新に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyRecordDto"];
                };
            };
        };
    };
    BeverageRecordsController_findByResident: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 飲料記録一覧の取得に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BeverageRecordListResponseDto"];
                };
            };
        };
    };
    BeverageRecordsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 利用者UID */
                residentUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BeverageRecordCreateInputDto"];
            };
        };
        responses: {
            /** @description 飲料記録の作成に成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BeverageRecordDto"];
                };
            };
        };
    };
    BeverageRecordsController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 飲料記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 飲料記録の削除に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeverageRecordsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 飲料記録UID */
                uid: string;
                /** @description 利用者UID */
                residentUid: unknown;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BeverageRecordUpdateInputDto"];
            };
        };
        responses: {
            /** @description 飲料記録の更新に成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BeverageRecordDto"];
                };
            };
        };
    };
}
